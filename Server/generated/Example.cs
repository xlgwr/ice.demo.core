//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Example.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Demo
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class C : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        public string name;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        public C()
        {
            this.name = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        public C(string name)
        {
            this.name = name;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Demo::C";

        public static new string ice_staticId()
        {
            return _id;
        }
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(name);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class S : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        public string name;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        public S()
        {
            this.name = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        public S(string name)
        {
            this.name = name;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Demo::S");
            global::IceInternal.HashUtil.hashAdd(ref h_, name);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            S o = (S)other;
            if(this.name == null)
            {
                if(o.name != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.name.Equals(o.name))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        public static bool operator==(S lhs, S rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        public static bool operator!=(S lhs, S rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeString(this.name);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.name = istr.readString();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        public static void ice_write(global::Ice.OutputStream ostr, S v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        public static S ice_read(global::Ice.InputStream istr)
        {
            var v = new S();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly S _nullMarshalValue = new S();

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Example : global::Ice.Object, ExampleOperations_
    {
    }
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
    public delegate void Callback_Example_getC(C ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
    public delegate void Callback_Example_getC2(C ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
    public delegate void Callback_Example_getS(S val);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
    public delegate void Callback_Example_getS2(S val);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
    public delegate void Callback_Example_getValues(string ret, string[] val);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
    public delegate void Callback_Example_getValues2(string ret, string[] val);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
    public delegate void Callback_Example_getValuesAMD(string ret, string[] val);
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
    public struct Example_GetC2MarshaledResult : global::Ice.MarshaledResult
    {
        public Example_GetC2MarshaledResult(C ret, global::Ice.Current current)
        {
            _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
            _ostr.writeValue(ret);
            _ostr.writePendingValues();
            _ostr.endEncapsulation();
        }

        public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
        {
            if(_ostr == null)
            {
                return new Example_GetC2MarshaledResult(null, current).getOutputStream(current);
            }
            return _ostr;
        }

        private global::Ice.OutputStream _ostr;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
    public struct Example_GetS2MarshaledResult : global::Ice.MarshaledResult
    {
        public Example_GetS2MarshaledResult(S val, global::Ice.Current current)
        {
            _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
            S.ice_write(_ostr, val);
            _ostr.endEncapsulation();
        }

        public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
        {
            if(_ostr == null)
            {
                return new Example_GetS2MarshaledResult(new S(), current).getOutputStream(current);
            }
            return _ostr;
        }

        private global::Ice.OutputStream _ostr;
    }

    public struct Example_GetValuesResult
    {
        public Example_GetValuesResult(string returnValue, string[] val)
        {
            this.returnValue = returnValue;
            this.val = val;
        }

        public string returnValue;
        public string[] val;
    }

    public struct Example_GetValues2Result
    {
        public Example_GetValues2Result(string returnValue, string[] val)
        {
            this.returnValue = returnValue;
            this.val = val;
        }

        public string returnValue;
        public string[] val;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
    public struct Example_GetValues2MarshaledResult : global::Ice.MarshaledResult
    {
        public Example_GetValues2MarshaledResult(string ret, string[] val, global::Ice.Current current)
        {
            _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
            SeqHelper.write(_ostr, val);
            _ostr.writeString(ret);
            _ostr.endEncapsulation();
        }

        public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
        {
            if(_ostr == null)
            {
                return new Example_GetValues2MarshaledResult(null, null, current).getOutputStream(current);
            }
            return _ostr;
        }

        private global::Ice.OutputStream _ostr;
    }

    public struct Example_GetValuesAMDResult
    {
        public Example_GetValuesAMDResult(string returnValue, string[] val)
        {
            this.returnValue = returnValue;
            this.val = val;
        }

        public string returnValue;
        public string[] val;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
    public struct Example_GetValuesAMDMarshaledResult : global::Ice.MarshaledResult
    {
        public Example_GetValuesAMDMarshaledResult(string ret, string[] val, global::Ice.Current current)
        {
            _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
            SeqHelper.write(_ostr, val);
            _ostr.writeString(ret);
            _ostr.endEncapsulation();
        }

        public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
        {
            if(_ostr == null)
            {
                return new Example_GetValuesAMDMarshaledResult(null, null, current).getOutputStream(current);
            }
            return _ostr;
        }

        private global::Ice.OutputStream _ostr;
    }
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
    public interface ExamplePrx : global::Ice.ObjectPrx
    {
        C getC(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<C> getCAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Example_getC> begin_getC(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getC(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getC(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        C end_getC(global::Ice.AsyncResult asyncResult);

        C getC2(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<C> getC2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Example_getC2> begin_getC2(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getC2(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getC2(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        C end_getC2(global::Ice.AsyncResult asyncResult);

        void getS(out S val, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<S> getSAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Example_getS> begin_getS(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getS(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getS(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_getS(out S val, global::Ice.AsyncResult asyncResult);

        void getS2(out S val, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<S> getS2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Example_getS2> begin_getS2(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getS2(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getS2(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_getS2(out S val, global::Ice.AsyncResult asyncResult);

        string getValues(string name, out string[] val, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Example_GetValuesResult> getValuesAsync(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Example_getValues> begin_getValues(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getValues(string name, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getValues(string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string end_getValues(out string[] val, global::Ice.AsyncResult asyncResult);

        string getValues2(string name, out string[] val, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Example_GetValues2Result> getValues2Async(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Example_getValues2> begin_getValues2(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getValues2(string name, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getValues2(string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string end_getValues2(out string[] val, global::Ice.AsyncResult asyncResult);

        string getValuesAMD(string name, out string[] val, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Example_GetValuesAMDResult> getValuesAMDAsync(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Example_getValuesAMD> begin_getValuesAMD(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getValuesAMD(string name, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getValuesAMD(string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string end_getValuesAMD(out string[] val, global::Ice.AsyncResult asyncResult);
    }
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
    public interface ExampleOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        C getC(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        Example_GetC2MarshaledResult getC2(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        void getS(out S val, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        Example_GetS2MarshaledResult getS2(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        string getValues(string name, out string[] val, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        Example_GetValues2MarshaledResult getValues2(string name, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
        global::System.Threading.Tasks.Task<Example_GetValuesAMDMarshaledResult> getValuesAMDAsync(string name, global::Ice.Current current = null);
    }
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
    public sealed class SeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(global::Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
    [global::System.Serializable]
    public sealed class ExamplePrxHelper : global::Ice.ObjectPrxHelperBase, ExamplePrx
    {
        public ExamplePrxHelper()
        {
        }

        public ExamplePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public C getC(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getCAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public C getC2(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getC2Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void getS(out S val, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                val = _iceI_getSAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void getS2(out S val, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                val = _iceI_getS2Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string getValues(string name, out string[] val, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_getValuesAsync(name, context, null, global::System.Threading.CancellationToken.None, true).Result;
                val = result_.val;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string getValues2(string name, out string[] val, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_getValues2Async(name, context, null, global::System.Threading.CancellationToken.None, true).Result;
                val = result_.val;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string getValuesAMD(string name, out string[] val, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_getValuesAMDAsync(name, context, null, global::System.Threading.CancellationToken.None, true).Result;
                val = result_.val;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<C> getCAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getCAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<C> _iceI_getCAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getC_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<C>(progress, cancel);
            _iceI_getC(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getC_name = "getC";

        private void _iceI_getC(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<C>(completed);
            outAsync.invoke(
                _getC_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    C ret = null;
                    istr.readValue((C v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<C> getC2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getC2Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<C> _iceI_getC2Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getC2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<C>(progress, cancel);
            _iceI_getC2(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getC2_name = "getC2";

        private void _iceI_getC2(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<C>(completed);
            outAsync.invoke(
                _getC2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    C ret = null;
                    istr.readValue((C v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<S> getSAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getSAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<S> _iceI_getSAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<S>(progress, cancel);
            _iceI_getS(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getS_name = "getS";

        private void _iceI_getS(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<S>(completed);
            outAsync.invoke(
                _getS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    S iceP_val = null;
                    iceP_val = S.ice_read(istr);
                    return iceP_val;
                });
        }

        public global::System.Threading.Tasks.Task<S> getS2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getS2Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<S> _iceI_getS2Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getS2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<S>(progress, cancel);
            _iceI_getS2(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getS2_name = "getS2";

        private void _iceI_getS2(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<S>(completed);
            outAsync.invoke(
                _getS2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    S iceP_val = null;
                    iceP_val = S.ice_read(istr);
                    return iceP_val;
                });
        }

        public global::System.Threading.Tasks.Task<Example_GetValuesResult> getValuesAsync(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getValuesAsync(name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Example_GetValuesResult> _iceI_getValuesAsync(string iceP_name, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getValues_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Example_GetValuesResult>(progress, cancel);
            _iceI_getValues(iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getValues_name = "getValues";

        private void _iceI_getValues(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Example_GetValuesResult>(completed);
            outAsync.invoke(
                _getValues_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Example_GetValuesResult ret = new Example_GetValuesResult();
                    ret.val = SeqHelper.read(istr);
                    ret.returnValue = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Example_GetValues2Result> getValues2Async(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getValues2Async(name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Example_GetValues2Result> _iceI_getValues2Async(string iceP_name, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getValues2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Example_GetValues2Result>(progress, cancel);
            _iceI_getValues2(iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getValues2_name = "getValues2";

        private void _iceI_getValues2(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Example_GetValues2Result>(completed);
            outAsync.invoke(
                _getValues2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Example_GetValues2Result ret = new Example_GetValues2Result();
                    ret.val = SeqHelper.read(istr);
                    ret.returnValue = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Example_GetValuesAMDResult> getValuesAMDAsync(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getValuesAMDAsync(name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Example_GetValuesAMDResult> _iceI_getValuesAMDAsync(string iceP_name, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getValuesAMD_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Example_GetValuesAMDResult>(progress, cancel);
            _iceI_getValuesAMD(iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getValuesAMD_name = "getValuesAMD";

        private void _iceI_getValuesAMD(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Example_GetValuesAMDResult>(completed);
            outAsync.invoke(
                _getValuesAMD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Example_GetValuesAMDResult ret = new Example_GetValuesAMDResult();
                    ret.val = SeqHelper.read(istr);
                    ret.returnValue = istr.readString();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Example_getC> begin_getC(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getC(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getC(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getC(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getC(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getC(context, callback, cookie, false);
        }

        public C end_getC(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getC_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<C>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Example_getC> begin_getC(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getC_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Example_getC, C>(
                (Callback_Example_getC cb, C ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getC_name, cookie, completedCallback);
            _iceI_getC(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Example_getC2> begin_getC2(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getC2(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getC2(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getC2(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getC2(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getC2(context, callback, cookie, false);
        }

        public C end_getC2(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getC2_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<C>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Example_getC2> begin_getC2(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getC2_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Example_getC2, C>(
                (Callback_Example_getC2 cb, C ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getC2_name, cookie, completedCallback);
            _iceI_getC2(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Example_getS> begin_getS(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getS(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getS(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getS(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getS(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getS(context, callback, cookie, false);
        }

        public void end_getS(out S val, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getS_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<S>)resultI_.OutgoingAsync;
            val = outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Example_getS> begin_getS(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getS_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Example_getS, S>(
                (Callback_Example_getS cb, S ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getS_name, cookie, completedCallback);
            _iceI_getS(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Example_getS2> begin_getS2(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getS2(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getS2(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getS2(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getS2(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getS2(context, callback, cookie, false);
        }

        public void end_getS2(out S val, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getS2_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<S>)resultI_.OutgoingAsync;
            val = outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Example_getS2> begin_getS2(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getS2_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Example_getS2, S>(
                (Callback_Example_getS2 cb, S ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getS2_name, cookie, completedCallback);
            _iceI_getS2(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Example_getValues> begin_getValues(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getValues(name, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getValues(string name, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getValues(name, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getValues(string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getValues(name, context, callback, cookie, false);
        }

        public string end_getValues(out string[] val, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getValues_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Example_GetValuesResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            val = result_.val;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_Example_getValues> begin_getValues(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getValues_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Example_getValues, Example_GetValuesResult>(
                (Callback_Example_getValues cb, Example_GetValuesResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.val);
                    }
                },
                this, _getValues_name, cookie, completedCallback);
            _iceI_getValues(iceP_name, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Example_getValues2> begin_getValues2(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getValues2(name, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getValues2(string name, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getValues2(name, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getValues2(string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getValues2(name, context, callback, cookie, false);
        }

        public string end_getValues2(out string[] val, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getValues2_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Example_GetValues2Result>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            val = result_.val;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_Example_getValues2> begin_getValues2(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getValues2_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Example_getValues2, Example_GetValues2Result>(
                (Callback_Example_getValues2 cb, Example_GetValues2Result ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.val);
                    }
                },
                this, _getValues2_name, cookie, completedCallback);
            _iceI_getValues2(iceP_name, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Example_getValuesAMD> begin_getValuesAMD(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getValuesAMD(name, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getValuesAMD(string name, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getValuesAMD(name, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getValuesAMD(string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getValuesAMD(name, context, callback, cookie, false);
        }

        public string end_getValuesAMD(out string[] val, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getValuesAMD_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Example_GetValuesAMDResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            val = result_.val;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_Example_getValuesAMD> begin_getValuesAMD(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getValuesAMD_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Example_getValuesAMD, Example_GetValuesAMDResult>(
                (Callback_Example_getValuesAMD cb, Example_GetValuesAMDResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.val);
                    }
                },
                this, _getValuesAMD_name, cookie, completedCallback);
            _iceI_getValuesAMD(iceP_name, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ExamplePrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ExamplePrx r = b as ExamplePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ExamplePrxHelper h = new ExamplePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ExamplePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ExamplePrx r = b as ExamplePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ExamplePrxHelper h = new ExamplePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ExamplePrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ExamplePrxHelper h = new ExamplePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ExamplePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ExamplePrxHelper h = new ExamplePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ExamplePrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ExamplePrx r = b as ExamplePrx;
            if(r == null)
            {
                ExamplePrxHelper h = new ExamplePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ExamplePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            ExamplePrxHelper h = new ExamplePrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Demo::Example",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, ExamplePrx v)
        {
            ostr.writeProxy(v);
        }

        public static ExamplePrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                ExamplePrxHelper result = new ExamplePrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Demo
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.2")]
    public abstract class ExampleDisp_ : global::Ice.ObjectImpl, Example
    {
        #region Slice operations

        public abstract C getC(global::Ice.Current current = null);

        public abstract Example_GetC2MarshaledResult getC2(global::Ice.Current current = null);

        public abstract void getS(out S val, global::Ice.Current current = null);

        public abstract Example_GetS2MarshaledResult getS2(global::Ice.Current current = null);

        public abstract string getValues(string name, out string[] val, global::Ice.Current current = null);

        public abstract Example_GetValues2MarshaledResult getValues2(string name, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<Example_GetValuesAMDMarshaledResult> getValuesAMDAsync(string name, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Demo::Example",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getC(Example obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getC(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getC2(Example obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            return inS.setMarshaledResult(obj.getC2(current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getS(Example obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            S iceP_val;
            obj.getS(out iceP_val, current);
            var ostr = inS.startWriteParams();
            S.ice_write(ostr, iceP_val);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getS2(Example obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            return inS.setMarshaledResult(obj.getS2(current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getValues(Example obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_name;
            iceP_name = istr.readString();
            inS.endReadParams();
            string[] iceP_val;
            var ret = obj.getValues(iceP_name, out iceP_val, current);
            var ostr = inS.startWriteParams();
            SeqHelper.write(ostr, iceP_val);
            ostr.writeString(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getValues2(Example obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_name;
            iceP_name = istr.readString();
            inS.endReadParams();
            return inS.setMarshaledResult(obj.getValues2(iceP_name, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getValuesAMD(Example obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_name;
            iceP_name = istr.readString();
            inS.endReadParams();
            return inS.setMarshaledResultTask(obj.getValuesAMDAsync(iceP_name, current));
        }

        private static readonly string[] _all =
        {
            "getC",
            "getC2",
            "getS",
            "getS2",
            "getValues",
            "getValues2",
            "getValuesAMD",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getC(this, inS, current);
                }
                case 1:
                {
                    return iceD_getC2(this, inS, current);
                }
                case 2:
                {
                    return iceD_getS(this, inS, current);
                }
                case 3:
                {
                    return iceD_getS2(this, inS, current);
                }
                case 4:
                {
                    return iceD_getValues(this, inS, current);
                }
                case 5:
                {
                    return iceD_getValues2(this, inS, current);
                }
                case 6:
                {
                    return iceD_getValuesAMD(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 9:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 10:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
